# -*- coding: utf-8 -*-
"""Sama_Alharbi stc TV_T1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-2bF-eu1l2-JH7QvPku_alkfFD2dwJaa

# STC Jawwy
"""

"""
Here we install libraries that are not installed by default
Example:  pyslsb
Feel free to add any library you are planning to use.
"""
!pip install pyxlsb

!pip install --upgrade pyxlsb

# Import the required libraries
"""
Please feel free to import any required libraries as per your needs
"""
import pandas as pd     # provides high-performance, easy to use structures and data analysis tools
import pyxlsb           # Excel extention to read xlsb files (the input file)
import numpy as np      # provides fast mathematical computation on arrays and matrices

"""# Jawwy dataset
The dataset consists of meta details about the movies and tv shows as genre.
Also details about Users activities, spent duration and if watching in High definition or standard definition.
You have to analyse this dataset to find top insights, findings and to solve the four tasks assigned to you.
"""

df = pd.read_excel('/content/stc TV Data Set_T1.xlsb', engine='pyxlsb')

# check the data shape
df.shape

# display the first 5 rows
df.head()

# display the last 5 rows
df.tail()

df.sample()

#Find the dataset information and observe the datatypes.
df.info()

#Check for null values.
df.isnull().sum()

df.head()

print(df['date_'].head(10))  # رؤية القيم الأولية
print(df['date_'].dtype)  # التحقق من نوع البيانات

# Data Preprocessing on the input data
df = df.drop(columns=['Column1'])         # dropping the index column
df['program_name'] = df['program_name'].str.strip()  # trim spaces in movies names to avoid misspellings in input data
#df['date_'] = pd.to_datetime(df['date_'], unit='d', origin='30/12/1899')  # read date column as date data type
df['date_'] = pd.to_datetime(df['date_'], unit='D', origin='1899-12-30')
df[['duration_seconds', 'season','episode','series_title','hd']] = df[['duration_seconds', 'season','episode','series_title','hd']].apply(pd.to_numeric)  # read numeric columns as numeric data types
df[['user_id_maped', 'program_name','program_class','program_desc','program_genre','original_name']] = df[['user_id_maped', 'program_name','program_class','program_desc','program_genre','original_name']].astype(str) # read string columns as string data types

# display the dataset after applying data types
df.head()

# describe the numeric values in the dataset
df.describe()

# check if any column has null value in the dataset
df.isnull().any()

"""# Task 1
##### You are required to work on task one to study and HD flag for available dataset
"""

# make a copy of the dataframe for working on task 1
df1=df.copy()

# Here we try to get the most watched movies (Total Views / Total Users Views / Total watch time)
# For series we concatenated the Session episode to differentiate between episodes
grouped=df1.copy()
grouped.loc[grouped['program_class'] == 'SERIES/EPISODES', 'program_name'] = grouped['program_name']+'_SE'+grouped['season'].astype(str)+'_EP'+grouped['episode'].astype(str)
grouped = grouped.groupby(['program_name','program_class'])\
.agg({'user_id_maped': [('co1', 'nunique'),('co2', 'count')],\
      'duration_seconds': [('co3', 'sum')] }).reset_index()
grouped.columns = ['program_name','program_class','No of Users who Watched', 'No of watches', 'Total watch time in seconds']
grouped['Total watch time in houres']=grouped['Total watch time in seconds']/3600
grouped = grouped.drop(columns=['Total watch time in seconds'])
grouped = grouped.sort_values(by=['Total watch time in houres', 'No of watches','No of Users who Watched'], ascending=False).reset_index(drop=True)

# show the result
grouped.head(35)

# we import Visualization libraries
# you can ignore and use any other graphing libraries
import matplotlib.pyplot as plt # a comprehensive library for creating static, animated, and interactive visualizations
import plotly #a graphing library makes interactive, publication-quality graphs. Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box plots, histograms, heatmaps, subplots, multiple-axes, polar charts, and bubble charts.
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# plot top 10 Programs
fig = px.pie(grouped.head(10), values='Total watch time in houres', names='program_name',\
             hover_data=['program_class'],title='top 10 programs in total watch time in houres')
fig.show()

# Here we try to study the customer experience against Program class
grouped=df1.copy()
grouped = grouped.groupby('program_class')\
.agg({'user_id_maped': [('co1', 'nunique'),('co2', 'count')],\
      'duration_seconds': [('co3', 'sum')] }).reset_index()
grouped.columns = ['program_class','No of Users who Watched', 'No of watches', 'Total watch time in seconds']
grouped['Total watch time in houres']=grouped['Total watch time in seconds']/3600
grouped = grouped.drop(columns=['Total watch time in seconds'])
grouped = grouped.sort_values(by=['Total watch time in houres', 'No of watches','No of Users who Watched'], ascending=False).reset_index(drop=True)

# show the result
grouped.head()

# plot the total watch time against total number of users and report your findings
fig = px.pie(grouped, values='Total watch time in houres', names='program_class',\
             hover_data=['program_class'],title='Total duration spent by program_class')
fig2 = px.pie(grouped, values='No of Users who Watched', names='program_class',\
             hover_data=['program_class'],title='Total Users watching by program_class')

fig.update_traces(sort=False)
fig2.update_traces(sort=False)
fig.show()
fig2.show()

"""
TODO study the relation and user's behaviour Against HD flag, feel free to include any comparison
"""

# حساب متوسط مدة المشاهدة (بالدقائق) لمحتوى HD وغير HD
avg_watch_time_hd = df.loc[df['hd'] == 1, 'duration_seconds'].mean() / 60
avg_watch_time_non_hd = df.loc[df['hd'] == 0, 'duration_seconds'].mean() / 60

# طباعة النتائج
print(f"Average watch time per user for HD content: {avg_watch_time_hd:.2f} minutes")
print(f"Average watch time per user for non-HD content: {avg_watch_time_non_hd:.2f} minutes")

import matplotlib.pyplot as plt

plt.bar(['HD', 'Non-HD'], [avg_watch_time_hd, avg_watch_time_non_hd], color=['blue', 'gray'])
plt.xlabel('Content Type')
plt.ylabel('Average Watch Time (minutes)')
plt.title('Comparison of Average Watch Time: HD vs Non-HD')
plt.show()

import plotly.express as px


data = {'Content Type': ['HD', 'Non-HD'], 'Average Watch Time (minutes)': [avg_watch_time_hd, avg_watch_time_non_hd]}


fig = px.bar(data, x='Content Type', y='Average Watch Time (minutes)',
             color='Content Type', title='Comparison of Average Watch Time: HD vs Non-HD')


fig.show()